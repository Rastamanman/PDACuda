#include <iostream>

using namespace std;

#define MSIZE 5
#define INF 999999

__DoThis__(float* M[MSIZE], int k)
{
	int i = threadIdx.x;
	int j = threadIdx.y;
	if(M[i][j] > M[i][k]+M[k][j])
		M[i][j] = M[i][k]+M[k][j];
}

int main(void)
{
	size_t size = MSIZE * sizeof(float);

	float *h_A[MSIZE] = (float*[MSIZE])malloc(MSIZE * size);
	/*for(int i = 0; i < MSIZE; i++)
		for(int j = 0; j < MSIZE; j++)
			cin>>h_A[i][j];
	*/
	h_A = { {0, 3, 3, INF, 2},
		{INF, 0 , 45, 2, 2},
		{12, 21, 0, INF, 7},
		{4, 6, 9, 0, INF, 2},
		{5, 32, 9, INF, 0}};

	float *d_A[MSIZE];
	cudaMalloc(&d_A, MSIZE * size);

	cudaMemcpy(d_A, h_A, MSIZE * size, cudaMemcpyHostToDevice);

	int threadsPerBlock = MSIZE;
	int numOfBlocks = 1;
	
	for(int i = 0; i < MSIZE; i++)
	{
		DoThis<<<numOfBlocks, threadsPerBlock>>>(d_A, i);
	}
	
	cudaMemcpy(h_A, d_A, MSIZE * size, cudaMemcpyDeviceToHost);

	cudaFree(d_A);
	free(h_A);
}